name: GitHub Branch CI

on:
  push:
    branches-ignore:
      - master

jobs:
  pyomo-tests:
    name: ${{ matrix.TARGET }}/py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
        - os: macos-latest
          TARGET: osx
          PYENV: pip
        - os: ubuntu-latest
          TARGET: linux
          PYENV: pip
        - os: windows-latest
          TARGET: win
          PYENV: conda
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2

    - name: Conda package cache
      uses: actions/cache@v1
      if: matrix.PYENV == 'conda'
      id: conda-cache
      with:
        path: conda-cache
        key: conda-v1-${{runner.os}}-${{matrix.python-version}}

    - name: Pip package cache
      uses: actions/cache@v1
      if: matrix.PYENV == 'pip'
      id: pip-cache
      with:
        path: pip-cache
        key: pip-v1-${{runner.os}}-${{matrix.python-version}}

    - name: OS package cache
      uses: actions/cache@v1
      id: pkg-cache
      with:
        path: pkg-cache
        key: pkg-v1-${{runner.os}}

    - name: Download cache
      uses: actions/cache@v1
      id: download-cache
      with:
        path: download-cache
        key: download-v1-${{runner.os}}

    - name: Update OSX
      if: matrix.TARGET == 'osx'
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/pkg-cache
        export HOMEBREW_CACHE=${GITHUB_WORKSPACE}/pkg-cache
        echo "Install pre-dependencies for pyodbc..."
        brew update
        for pkg in bash gcc pkg-config unixodbc freetds; do
            brew list $pkg || brew install $pkg
        done
        brew link --overwrite gcc

    - name: Update Linux
      if: matrix.TARGET == 'linux'
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/pkg-cache
        echo "Install pre-dependencies for ipopt..."
        sudo apt-get -o Dir::Cache=${GITHUB_WORKSPACE}/pkg-cache \
            install libopenblas-dev gfortran liblapack-dev
        sudo chmod -R 777 ${GITHUB_WORKSPACE}/pkg-cache

    - name: Set up Python ${{ matrix.python-version }}
      if: matrix.PYENV == 'pip'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Miniconda Python ${{ matrix.python-version }}
      if: matrix.PYENV == 'conda'
      uses: goanpeca/setup-miniconda@v1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Install Python Packages (pip)
      if: matrix.PYENV == 'pip'
      env:
        PIP_PKGS: >
            cython numpy scipy ipython openpyxl sympy pyyaml
            pyodbc networkx xlrd pandas matplotlib dill seaborn pymysql
            pyro4 pint pathos coverage nose
      shell: bash
      run: |
        python -m pip install --cache-dir pip-cache --upgrade pip
        # Note: pandas 1.0.3 causes gams 29.1.0 import to fail in python 3.8
        pip install --cache-dir pip-cache $PIP_PKGS
        pip install --cache-dir pip-cache cplex \
            || echo "WARNING: CPLEX Community Edition is not available"

    - name: Install Python packages (conda)
      if: matrix.PYENV == 'conda'
      env:
        PYTHONWARNINGS: ignore::UserWarning
        CONDA_PKGS: >
            numpy scipy ipython openpyxl sympy pyodbc pyyaml networkx 
            xlrd pandas matplotlib dill seaborn setuptools pip coverage
            sphinx_rtd_theme pymysql pyro4 pint pathos glpk
      shell: bash -l {0}
      run: |
        mkdir -p $GITHUB_WORKSPACE/conda-cache
        conda config --set always_yes yes
        conda config --set auto_update_conda false
        conda config --prepend pkgs_dirs $GITHUB_WORKSPACE/conda-cache
        conda info
        conda config --show-sources
        conda list --show-channel-urls
        conda install -q -y -c conda-forge --no-update-deps $CONDA_PKGS
        conda install -q -y -c ibmdecisionoptimization --no-update-deps cplex \
            || echo "WARNING: CPLEX Community Edition is not available"

    - name: Install ipopt
      shell: bash
      run: |
        # Ensure cache directories exist
        mkdir -p ${GITHUB_WORKSPACE}/download-cache
        #
        IPOPT_TAR=${GITHUB_WORKSPACE}/download-cache/ipopt.tar.gz
        if test ! -e $IPOPT_TAR; then
            echo "...downloading Ipopt"
            URL=https://github.com/IDAES/idaes-ext/releases/download/2.0.0
            if test "${{matrix.TARGET}}" == osx; then
                echo "IDAES Ipopt not available on OSX"
            elif test "${{matrix.TARGET}}" == linux; then
                curl -L $URL/idaes-solvers-ubuntu1804-64.tar.gz > $IPOPT_TAR
            else
                curl -L $URL/idaes-solvers-windows-64.tar.gz \
                    $URL/idaes-lib-windows-64.tar.gz > $IPOPT_TAR
            fi
        fi
        IPOPT_DIR=${GITHUB_WORKSPACE}/packages/ipopt
        mkdir -p $IPOPT_DIR
        pushd $IPOPT_DIR
        TAR=../../download-cache/ipopt.tar.gz
        test -e $TAR && tar -xzif $TAR
        popd
        echo "::add-path::$IPOPT_DIR"

    - name: Install GAMS
      shell: pwsh
      run: |
        $GAMS_DIR="packages/gams"
        $GAMS_INSTALLER="download-cache/gams_install.exe"
        $URL="https://d37drm4t2jghv5.cloudfront.net/distributions/29.1.0"
        if ( -not (Test-Path "$GAMS_INSTALLER")) {
            echo "...downloading GAMS"
            if ( "${{matrix.TARGET}}" -eq "win" ) {
                $URL = "$URL/windows/windows_x64_64.exe"
            } elseif ( "${{matrix.TARGET}}" -eq "osx" ) {
                $URL = "$URL/macosx/osx_x64_64_sfx.exe"
            } else {
                $URL = "$URL/linux/linux_x64_64_sfx.exe"
            }
            Invoke-WebRequest -Uri "$URL" -OutFile "$GAMS_INSTALLER"
        }
        echo "PWD:"
        ls
        echo "DOWNLOAD-CACHE:"
        ls download-cache
        echo "PACKAGES:"
        ls packages
        rm -r $GAMS_DIR
        mkdir -p $GAMS_DIR
        echo "PACKAGES GAMS:"
        ls packages/gams
        echo "...installing GAMS"
        if ( "${{matrix.TARGET}}" -eq "win" ) {
            Start-Process -FilePath "$GAMS_INSTALLER" -ArgumentList `
                '/SP- /NORESTART /DIR=packages\gams /NOICONS' -Wait
        } else {
            chmod 777 $GAMS_INSTALLER
            Start-Process -FilePath "$GAMS_INSTALLER" -ArgumentList `
                "-q -d packages/gams" -Wait
            mv $GAMS_DIR/*/* $GAMS_DIR/.
        }
        echo "PACKAGES GAMS:"
        ls packages/gams
        $GAMS_DIR="$env:GITHUB_WORKSPACE/$GAMS_DIR"
        echo "PATH: $GAMS_DIR"
        echo "::add-path::$GAMS_DIR"
        echo "::set-env name=LD_LIBRARY_PATH::${env:LD_LIBRARY_PATH}:$GAMS_DIR"
        echo "::set-env name=DYLD_LIBRARY_PATH::${env:DYLD_LIBRARY_PATH}:$GAMS_DIR"

    - name: Install GAMS Python bindings
      shell: bash
      run: |
        GAMS_DIR="packages/gams"
        py_ver=$(python -c 'import sys;v="_%s%s" % sys.version_info[:2] \
            ;print(v if v != "_27" else "")')
        if test -e $GAMS_DIR/apifiles/Python/api$py_ver; then
            echo "Installing GAMS Python bindings"
            pushd $GAMS_VER/apifiles/Python/api$py_ver
            python setup.py -q install
            popd
        fi

    - name: Install Pyomo and PyUtilib
      env:
        PYTHONWARNINGS: ignore::UserWarning
      run: |
        echo ""
        echo "Clone Pyomo-model-libraries..."
        git clone --quiet https://github.com/Pyomo/pyomo-model-libraries.git
        echo ""
        echo "Install PyUtilib..."
        echo ""
        pip install --quiet git+https://github.com/PyUtilib/pyutilib
        echo ""
        echo "Install Pyomo..."
        echo ""
        python setup.py develop

    - name: Set up coverage tracking
      shell: bash
      run: |
        COVERAGE_RC=${GITHUB_WORKSPACE}/coveragerc
        echo "::set-env name=COVERAGE_PROCESS_START::$COVERAGE_RC"
        cp ${GITHUB_WORKSPACE}/.coveragerc ${COVERAGE_RC}
        echo "data_file=${GITHUB_WORKSPACE}/.coverage" >> ${COVERAGE_RC}
        SITE_PACKAGES=$(python -c "from distutils.sysconfig import \
            get_python_lib; print(get_python_lib())")
        echo 'import coverage; coverage.process_startup()' \
            > ${SITE_PACKAGES}/run_coverage_at_startup.pth

    - name: Download and install extensions
      run: |
        echo ""
        echo "Pyomo download-extensions"
        echo ""
        pyomo download-extensions
        echo ""
        echo "Pyomo build-extensions"
        echo ""
        pyomo build-extensions --parallel 2

    - name: Run Pyomo tests
      env:
        PYTHONWARNINGS: ignore::UserWarning
      run: |
        test.pyomo -v --cat="nightly" pyomo ./pyomo-model-libraries

    - name: Process code coverage report
      env:
        CODECOV_NAME: ${{matrix.TARGET}}/py${{matrix.python-version}}
      run: |
        coverage combine
        coverage report -i
        curl --retry 8 -s https://codecov.io/bash -o codecov.sh
        # Disable coverage uploads on branches
        bash codecov.sh -X gcov
