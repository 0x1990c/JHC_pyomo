name: GitHub Branch CI

on:
  push:
    branches-ignore:
      - master

jobs:
  pyomo-tests:
    name: ${{ matrix.TARGET }}/py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
        - os: macos-latest
          TARGET: osx
          PYENV: pip
        - os: ubuntu-latest
          TARGET: linux
          PYENV: pip
        - os: windows-latest
          TARGET: win
          PYENV: conda
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2

    # Ideally we would cache the conda downloads; however, each cache is
    # over 850MB, and with 5 python versions, that would consume 4.2 of
    # the 5 GB GitHub allows.
    #
    #- name: Conda package cache
    #  uses: actions/cache@v1
    #  if: matrix.PYENV == 'conda'
    #  id: conda-cache
    #  with:
    #    path: cache/conda
    #    key: conda-v2-${{runner.os}}-${{matrix.python-version}}

    - name: Pip package cache
      uses: actions/cache@v1
      if: matrix.PYENV == 'pip'
      id: pip-cache
      with:
        path: cache/pip
        key: pip-v2-${{runner.os}}-${{matrix.python-version}}

    - name: OS package cache
      uses: actions/cache@v1
      id: os-cache
      with:
        path: cache/os
        key: pkg-v2-${{runner.os}}

    - name: Download cache
      uses: actions/cache@v1
      id: download-cache
      with:
        path: cache/download
        key: download-v2-${{runner.os}}

    - name: Update OSX
      if: matrix.TARGET == 'osx'
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/cache/os
        export HOMEBREW_CACHE=${GITHUB_WORKSPACE}/cache/os
        echo "Install pre-dependencies for pyodbc..."
        brew update
        for pkg in bash gcc pkg-config unixodbc freetds glpk; do
            brew list $pkg || brew install $pkg
        done
        brew link --overwrite gcc

    - name: Update Linux
      if: matrix.TARGET == 'linux'
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/cache/os
        echo "Install pre-dependencies for ipopt..."
        sudo apt-get -o Dir::Cache=${GITHUB_WORKSPACE}/cache/os \
            install libopenblas-dev gfortran liblapack-dev glpk-utils
        sudo chmod -R 777 ${GITHUB_WORKSPACE}/cache/os

    - name: Set up Python ${{ matrix.python-version }}
      if: matrix.PYENV == 'pip'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Miniconda Python ${{ matrix.python-version }}
      if: matrix.PYENV == 'conda'
      uses: goanpeca/setup-miniconda@v1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Install Python Packages (pip)
      if: matrix.PYENV == 'pip'
      env:
        PIP_PKGS: >
            cython numpy scipy ipython openpyxl sympy pyyaml
            pyodbc networkx xlrd pandas matplotlib dill seaborn pymysql
            pyro4 pint pathos coverage nose
      shell: bash
      run: |
        python -m pip install --cache-dir cache/pip --upgrade pip
        # Note: pandas 1.0.3 causes gams 29.1.0 import to fail in python 3.8
        pip install --cache-dir cache/pip $PIP_PKGS
        pip install --cache-dir cache/pip cplex \
            || echo "WARNING: CPLEX Community Edition is not available"

    - name: Install Python packages (conda)
      if: matrix.PYENV == 'conda'
      env:
        PYTHONWARNINGS: ignore::UserWarning
        CONDA_PKGS: >
            numpy scipy ipython openpyxl sympy pyodbc pyyaml networkx 
            xlrd pandas matplotlib dill seaborn setuptools pip coverage
            sphinx_rtd_theme pymysql pyro4 pint pathos glpk
      shell: bash -l {0}
      run: |
        mkdir -p $GITHUB_WORKSPACE/cache/conda
        conda config --set always_yes yes
        conda config --set auto_update_conda false
        conda config --prepend pkgs_dirs $GITHUB_WORKSPACE/cache/conda
        conda info
        conda config --show-sources
        conda list --show-channel-urls
        conda install -q -y -c conda-forge --no-update-deps $CONDA_PKGS
        conda install -q -y -c ibmdecisionoptimization --no-update-deps cplex \
            || echo "WARNING: CPLEX Community Edition is not available"

    - name: Install Ipopt
      shell: bash
      run: |
        # Ensure cache directories exist
        mkdir -p ${GITHUB_WORKSPACE}/cache/download
        #
        IPOPT_TAR=${GITHUB_WORKSPACE}/cache/download/ipopt.tar.gz
        if test ! -e $IPOPT_TAR; then
            echo "...downloading Ipopt"
            URL=https://github.com/IDAES/idaes-ext/releases/download/2.0.0
            if test "${{matrix.TARGET}}" == osx; then
                echo "IDAES Ipopt not available on OSX"
            elif test "${{matrix.TARGET}}" == linux; then
                curl -L $URL/idaes-solvers-ubuntu1804-64.tar.gz > $IPOPT_TAR
            else
                curl -L $URL/idaes-solvers-windows-64.tar.gz \
                    $URL/idaes-lib-windows-64.tar.gz > $IPOPT_TAR
            fi
        fi
        IPOPT_DIR=${GITHUB_WORKSPACE}/packages/ipopt
        mkdir -p $IPOPT_DIR
        pushd $IPOPT_DIR
        TAR=../../cache/download/ipopt.tar.gz
        test -e $TAR && tar -xzif $TAR
        popd
        echo "::add-path::$IPOPT_DIR"

    - name: Install GAMS (bash)
      if: 0 == 1
      shell: bash
      run: |
        GAMS_DIR="$GITHUB_WORKSPACE/packages/gams"
        GAMS_INSTALLER="cache/download/gams_install.exe"
        if test ! -e "$GAMS_INSTALLER"; then
            echo "...downloading GAMS"
            URL="https://d37drm4t2jghv5.cloudfront.net/distributions/29.1.0"
            if test "${{matrix.TARGET}}" == win; then
                URL="$URL/windows/windows_x64_64.exe"
            elif test "${{matrix.TARGET}}" == osx; then
                URL="$URL/macosx/osx_x64_64_sfx.exe"
            else
                URL="$URL/linux/linux_x64_64_sfx.exe"
            fi
            curl -L "$URL" -o "$GAMS_INSTALLER"
        fi
        echo "...installing GAMS"
        if test "${{matrix.TARGET}}" == win; then
            "$GAMS_INSTALLER" /SP- /NORESTART /VERYSILENT /NOICONS \
                /DIR=$GAMS_DIR
        else
            chmod 777 $GAMS_INSTALLER
            "$GAMS_INSTALLER" -q -d $GAMS_DIR
            mv $GAMS_DIR/*/* $GAMS_DIR/.
        fi
        echo "PATH: $GAMS_DIR"
        echo "::add-path::$GAMS_DIR"
        echo "::set-env name=LD_LIBRARY_PATH::${LD_LIBRARY_PATH}:$GAMS_DIR"
        echo "::set-env name=DYLD_LIBRARY_PATH::${DYLD_LIBRARY_PATH}:$GAMS_DIR"

    - name: Install GAMS (powershell)
      # We install using Powershell because the GAMS installer hangs
      # when launched from bash on Windows
      if: 0 == 0
      shell: pwsh
      run: |
        $GAMS_DIR="$env:GITHUB_WORKSPACE/packages/gams"
        $GAMS_INSTALLER="cache/download/gams_install.exe"
        $URL="https://d37drm4t2jghv5.cloudfront.net/distributions/29.1.0"
        if (-not (Test-Path "$GAMS_INSTALLER" -PathType Leaf)) {
            echo "...downloading GAMS"
            if ( "${{matrix.TARGET}}" -eq "win" ) {
                $URL = "$URL/windows/windows_x64_64.exe"
            } elseif ( "${{matrix.TARGET}}" -eq "osx" ) {
                $URL = "$URL/macosx/osx_x64_64_sfx.exe"
            } else {
                $URL = "$URL/linux/linux_x64_64_sfx.exe"
            }
            Invoke-WebRequest -Uri "$URL" -OutFile "$GAMS_INSTALLER"
        }
        echo "...installing GAMS"
        if ( "${{matrix.TARGET}}" -eq "win" ) {
            Start-Process -FilePath "$GAMS_INSTALLER" -ArgumentList `
                "/SP- /NORESTART /VERYSILENT /DIR=$GAMS_DIR /NOICONS" `
                -Wait
        } else {
            chmod 777 $GAMS_INSTALLER
            Start-Process -FilePath "$GAMS_INSTALLER" -ArgumentList `
                "-q -d $GAMS_DIR" -Wait
            mv $GAMS_DIR/*/* $GAMS_DIR/.
        }
        echo "PATH: $GAMS_DIR"
        echo "::add-path::$GAMS_DIR"
        echo "::set-env name=LD_LIBRARY_PATH::${env:LD_LIBRARY_PATH}:$GAMS_DIR"
        echo "::set-env name=DYLD_LIBRARY_PATH::${env:DYLD_LIBRARY_PATH}:$GAMS_DIR"

    - name: Install GAMS Python bindings
      shell: bash
      run: |
        GAMS_DIR="$GITHUB_WORKSPACE/packages/gams"
        py_ver=$(python -c 'import sys;v="_%s%s" % sys.version_info[:2] \
            ;print(v if v != "_27" else "")')
        if test -e $GAMS_DIR/apifiles/Python/api$py_ver; then
            echo "Installing GAMS Python bindings"
            pushd $GAMS_DIR/apifiles/Python/api$py_ver
            python setup.py install
            popd
        fi

    - name: Install Pyomo and PyUtilib
      env:
        PYTHONWARNINGS: ignore::UserWarning
      run: |
        echo ""
        echo "Clone Pyomo-model-libraries..."
        git clone https://github.com/Pyomo/pyomo-model-libraries.git
        echo ""
        echo "Install PyUtilib..."
        echo ""
        pip install git+https://github.com/PyUtilib/pyutilib
        echo ""
        echo "Install Pyomo..."
        echo ""
        python setup.py develop

    - name: Set up coverage tracking
      shell: bash
      run: |
        if test "${{matrix.TARGET}}" == win; then
            COVERAGE_BASE=${GITHUB_WORKSPACE}\\.cover
        else
            COVERAGE_BASE=${GITHUB_WORKSPACE}/.cover
        fi
        COVERAGE_RC=${COVERAGE_BASE}_rc
        echo "::set-env name=COVERAGE_RCFILE::$COVERAGE_RC"
        echo "::set-env name=COVERAGE_PROCESS_START::$COVERAGE_RC"
        cp ${GITHUB_WORKSPACE}/.coveragerc ${COVERAGE_RC}
        echo "data_file=${COVERAGE_BASE}age" >> ${COVERAGE_RC}
        SITE_PACKAGES=$(python -c "from distutils.sysconfig import \
            get_python_lib; print(get_python_lib())")
        echo "SITE_PACKAGES: $SITE_PACKAGES"
        echo 'import coverage; coverage.process_startup()' \
            > ${SITE_PACKAGES}/run_coverage_at_startup.pth
        echo "run_coverage_at_startup.pth:"
        cat ${SITE_PACKAGES}/run_coverage_at_startup.pth
        echo ".cover_rc:"
        cat ${COVERAGE_RC}

    - name: Download and install extensions
      run: |
        echo ""
        echo "Pyomo download-extensions"
        echo ""
        pyomo download-extensions
        echo ""
        echo "Pyomo build-extensions"
        echo ""
        pyomo build-extensions --parallel 2
        ls .cover*
        ls
        ls ..

    - name: Run Pyomo tests
      env:
        PYTHONWARNINGS: ignore::UserWarning
      run: |
        test.pyomo -v --cat="nightly" pyomo ./pyomo-model-libraries

    - name: Process code coverage report
      env:
        CODECOV_NAME: ${{matrix.TARGET}}/py${{matrix.python-version}}
      run: |
        ls
        coverage combine
        coverage report -i
        curl --retry 8 -s https://codecov.io/bash -o codecov.sh
        # Disable coverage uploads on branches
        bash codecov.sh -X gcov -f '!cache/*'
