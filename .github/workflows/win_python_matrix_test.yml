name: GitHub CI (win)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  pyomo-tests:
    name: win/py${{ matrix.python-version }}
    runs-on: windows-latest
    strategy:
      fail-fast: false # This flag causes all of the matrix to continue to run, even if one matrix option fails
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8] 
    steps:
    - uses: actions/checkout@v2

    - name: Conda package cache
      id: conda-cache
      uses: actions/cache@v1
      with:
        path: conda-cache
        key: conda-v1-${{runner.os}}-${{matrix.python-version}}

    - name: Download cache
      id: download-cache
      uses: actions/cache@v1
      with:
        path: download-cache
        key: download-v1-${{runner.os}}

    - name: Set up Python ${{ matrix.python-version }} with Miniconda
      uses: goanpeca/setup-miniconda@v1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Install Pyomo dependencies
      shell: pwsh
      run: |
        $env:PYTHONWARNINGS="ignore::UserWarning"
        Write-Host ("Current Enviroment variables: ")
        gci env:Path | Sort Name
        Write-Host ("")
        Write-Host ("Update conda, then force it to NOT update itself again...")
        Write-Host ("")
        conda config --set always_yes yes
        conda config --set auto_update_conda false
        conda config --prepend pkgs_dirs $env:GITHUB_WORKSPACE\conda-cache
        conda info
        conda config --show-sources
        conda list --show-channel-urls
        Write-Host ("")
        Write-Host ("Setting Conda Env Vars... ")
        Write-Host ("")
        $CONDA_INSTALL = "conda install -q -y"
        $ANACONDA = "$CONDA_INSTALL -c anaconda"
        $CONDAFORGE = "$CONDA_INSTALL -c conda-forge --no-update-deps"
        $MINICONDA_EXTRAS="numpy scipy ipython openpyxl sympy pyodbc"
        $MINICONDA_EXTRAS+=" pyyaml networkx xlrd pandas matplotlib"
        $MINICONDA_EXTRAS+=" dill seaborn"
        $ADDITIONAL_CF_PKGS="setuptools pip coverage sphinx_rtd_theme"
        $ADDITIONAL_CF_PKGS+=" pymysql pyro4 pint pathos"
        $ADDITIONAL_CF_PKGS+=" glpk"
        Invoke-Expression "$CONDAFORGE $MINICONDA_EXTRAS $ADDITIONAL_CF_PKGS"
        Write-Host ("")
        Write-Host ("Try to install CPLEX...")
        Write-Host ("")
        try
        {
            Invoke-Expression "$CONDAFORGE -c ibmdecisionoptimization cplex=12.10"
        }
        catch
        {
            Write-Host ("WARNING: CPLEX Community Edition is not available for Python ${{matrix.python-version}}")
            conda deactivate
            conda activate test
        }
        Write-Host ("")
        Write-Host ("Installing IDAES Ipopt")
        Write-Host ("")
        New-Item -Path . -Name "solver_dir" -ItemType "directory"
        cd solver_dir
        Invoke-WebRequest -Uri 'https://github.com/IDAES/idaes-ext/releases/download/2.0.0/idaes-solvers-windows-64.tar.gz' -OutFile 'ipopt1.tar.gz'
        tar -xzf ipopt1.tar.gz
        Invoke-WebRequest -Uri 'https://github.com/IDAES/idaes-ext/releases/download/2.0.0/idaes-lib-windows-64.tar.gz' -OutFile 'ipopt2.tar.gz'
        tar -xzf ipopt2.tar.gz
        cd ..
        Write-Host ("")
        Write-Host ("Installing GAMS")
        Write-Host ("")
        $GAMS_INSTALLER="$env:GITHUB_WORKSPACE\download-cache\gams_win64.exe"
        if ( -not (Test-Path "$GAMS_INSTALLER")) {
            Write-Host ("...downloading GAMS")
            New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\download-cache"
            Invoke-WebRequest -Uri 'https://d37drm4t2jghv5.cloudfront.net/distributions/29.1.0/windows/windows_x64_64.exe' -OutFile "$GAMS_INSTALLER"
        }
        Write-Host ("...installing GAMS")
        Start-Process -FilePath "$GAMS_INSTALLER" -ArgumentList '/SP- /VERYSILENT /NORESTART /DIR=.\gams /NOICONS' -Wait
        cd gams\apifiles\Python\
        Write-Host ("...installing GAMS Python ${{matrix.python-version}} API")
        if(${{matrix.python-version}} -eq 2.7) {
          cd api
          python setup.py install
        }elseif(${{matrix.python-version}} -eq 3.6) {
          cd api_36
          python setup.py install
        }elseif(${{matrix.python-version}} -eq 3.7) {
          cd api_37
          python setup.py install
        }else { 
          Write-Host ("WARNING: GAMS Python bindings not available.")
        }
        Write-Host ("")
        Write-Host ("Conda package environment")
        Write-Host ("")
        conda list --show-channel-urls
        Write-Host ("")
        Write-Host ("New Shell Environment: ")
        gci env: | Sort Name

    - name: Install Pyomo and PyUtilib
      shell: pwsh
      run: |
        $env:PYTHONWARNINGS="ignore::UserWarning"
        Write-Host ("")
        Write-Host ("Clone model library and install PyUtilib...")
        Write-Host ("")
        git clone --quiet https://github.com/Pyomo/pyomo-model-libraries.git
        git clone --quiet https://github.com/PyUtilib/pyutilib.git
        cd pyutilib
        python setup.py develop
        cd ..
        Write-Host ("")
        Write-Host ("Install Pyomo...")
        Write-Host ("")
        python setup.py develop

    - name: Set up coverage tracking
      run: |
        $COVERAGE_PROCESS_START=${GITHUB_WORKSPACE}/coveragerc
        echo "::set-env name=COVERAGE_PROCESS_START::$COVERAGE_PROCESS_START"
        cp ${GITHUB_WORKSPACE}/.coveragerc ${COVERAGE_PROCESS_START}
        echo "data_file=${GITHUB_WORKSPACE}/.coverage" \
            >> ${COVERAGE_PROCESS_START}
        $SITE_PACKAGES=python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"
        echo 'import coverage; coverage.process_startup()' \
            > ${SITE_PACKAGES}/run_coverage_at_startup.pth

    - name: Download and install extensions
      shell: pwsh
      run: |
        Write-Host ("")
        Write-Host "Pyomo download-extensions"
        Write-Host ("")
        pyomo download-extensions
        Write-Host ("")
        Write-Host "Pyomo build-extensions"
        Write-Host ("")
        pyomo build-extensions --parallel 2

    - name: Run nightly tests with test.pyomo
      shell: pwsh
      run: |
        $env:PYTHONWARNINGS="ignore::UserWarning"
        Write-Host "Setup and run nosetests"
        $PWD="$env:GITHUB_WORKSPACE"
        $env:PATH += ";$PWD\gams;$PWD\solver_dir"
        test.pyomo -v --cat=nightly pyomo $PWD\pyomo-model-libraries

    - name: Process code coverage report
      env:
        GITHUB_JOB_NAME: win/${{matrix.TARGET}}/py${{matrix.python-version}}
      run: |
        coverage combine
        coverage report -i
        curl --retry 8 -s https://codecov.io/bash -o codecov.sh
        bash codecov.sh -X gcov -n "$GITHUB_JOB_NAME"
